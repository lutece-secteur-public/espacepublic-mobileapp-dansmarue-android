buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'
        classpath 'com.facebook.testing.screenshot:plugin:0.10.0'
        classpath 'com.android.tools.build:gradle:4.1.3'
    }
}

plugins {
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.facebook.testing.screenshot'
apply plugin: 'jacoco'
//apply plugin: 'com.jakewharton.butterknife'



ext.versionMajor = 2
ext.versionMinor = 9
ext.versionPatch = 4
ext.versionCode = 36
ext.minimumSdkVersion = 19

android {
    // Android 11
    compileSdkVersion 30
    // Build Tools, Revision 27.0.3 (December 2017)
    buildToolsVersion '29.0.2'

    flavorDimensions "versionCode"

    def releaseNotes = 'git log --pretty=format:"%s" --since "yesterday"'.execute([], project.rootDir).text.trim()

    defaultConfig {
        applicationId "your dmr applicationId"
        minSdkVersion 19
        //target ANdroid 11
        targetSdkVersion 30
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        resValue "string", "PATH_PICTURES", 'Android/data/' + applicationId + '/files/Pictures';
    }

    // Keep the following configuration in order to target Java 8.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    productFlavors {

        dev {
            buildConfigField "String", "SIRA_API_URL", '"http://api-back-office/rest/"'
            buildConfigField "String", "SIRA_API_URL_MOCK", '"http://api-back-office-mock/rest/"'
            buildConfigField "String", "API_URL_EQUIPEMENT", '"http://api-back-office/rest/"'
            buildConfigField "String", "AUTHENT_API_URL", '"https://authen-api/json"'
            buildConfigField "String", "AUTHENT_HEADER", '"mcpAuth"'
            applicationId "your dmr applicationId"
            resValue "string", "app_name", "Dans Ma Rue (Dev)"
            manifestPlaceholders = [
                    appIcon : "@mipmap/ic_launcher",
                    appLabel: "Dans Ma Rue (Dev)"
            ]
        }

        prec {
             buildConfigField "String", "SIRA_API_URL", '"http://api-back-office/rest/"'
            buildConfigField "String", "SIRA_API_URL_MOCK", '"http://api-back-office-mock/rest/"'
            buildConfigField "String", "API_URL_EQUIPEMENT", '"http://api-back-office/rest/"'
            buildConfigField "String", "AUTHENT_API_URL", '"https://authen-api/json"'
            buildConfigField "String", "AUTHENT_HEADER", '"mcpAuth"'
            applicationId "your dmr applicationId"
            resValue "string", "app_name", "Dans Ma Rue (Prec)"
            manifestPlaceholders = [
                    appIcon : "@mipmap/ic_launcher",
                    appLabel: "Dans Ma Rue (Prec)"
            ]
        }

        rec {



            buildConfigField "String", "SIRA_API_URL", '"http://api-back-office/rest/"'
            buildConfigField "String", "SIRA_API_URL_MOCK", '"http://api-back-office-mock/rest/"'
            buildConfigField "String", "API_URL_EQUIPEMENT", '"http://api-back-office/rest/"'
            buildConfigField "String", "AUTHENT_API_URL", '"https://authen-api/json"'
            buildConfigField "String", "AUTHENT_HEADER", '"mcpAuth"'
            applicationId "your dmr applicationId"
            resValue "string", "app_name", "Dans Ma Rue (Rec)"
            manifestPlaceholders = [
                    appIcon : "@mipmap/ic_launcher",
                    appLabel: "Dans Ma Rue (Rec)"
            ]
        }

        prod {
            buildConfigField "String", "SIRA_API_URL", '"http://api-back-office/rest/"'
            buildConfigField "String", "SIRA_API_URL_MOCK", '"http://api-back-office-mock/rest/"'
            buildConfigField "String", "API_URL_EQUIPEMENT", '"http://api-back-office/rest/"'
            buildConfigField "String", "AUTHENT_API_URL", '"https://authen-api/json"'
            buildConfigField "String", "AUTHENT_HEADER", '"mcpAuth"'
            applicationId "your dmr applicationId"
            resValue "string", "app_name", "Dans Ma Rue"
            manifestPlaceholders = [
                    appIcon : "@mipmap/ic_launcher",
                    appLabel: "Dans Ma Rue"
            ]

        }
    }

    signingConfigs {
        release
    }

    buildTypes {

        debug {
            ext.betaDistributionGroupAliases = "dansmarue-android-acn"
            ext.betaDistributionReleaseNotes = releaseNotes
            testCoverageEnabled = true
        }
        release {
            ext.betaDistributionGroupAliases = "dansmarue-android-acn"
            ext.betaDistributionReleaseNotes = releaseNotes

            minifyEnabled false
            testCoverageEnabled = false

            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    def propFilePath = null;
    if (project.hasProperty("AndroidProject.signing")
            && new File(project.property("AndroidProject.signing").toString()).exists()) {
        propFilePath = project.property("AndroidProject.signing");
    } else if (System.getenv("SIGN_CONFIG") != null) {
        propFilePath = System.getenv("SIGN_CONFIG") as String
    }

    if (propFilePath != null) {
        def Properties props = new Properties()
        def propFile = new File(propFilePath)
        if (propFile.canRead()) {
            props.load(new FileInputStream(propFile))
            if (props != null && props.containsKey('STORE_PASSWORD') &&
                    props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                android.signingConfigs.release.storeFile = file("dmr.keystore")
                android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
                android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
                android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
            } else {
                println 'androidproject.properties found but some entries are missing'
                android.buildTypes.release.signingConfig = null
            }
        } else {
            println 'androidproject.properties file not found'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'AndroidProject.signing property not found. modify your local gradle.properties file as follow -> AndroidProject.signing=C:\\\\dev\\\\VDP\\\\DansMaRue\\\\androidproject.properties'
        println 'androidproject.properties contains the STORE_PASSWORD, KEY_ALIAS and KEY_PASSWORD properties'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile fileTree(include: ['*.jar', '*.json'], dir: 'libs')
    androidTestCompile('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation 'com.jakewharton:butterknife:10.2.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'

    implementation 'com.google.dagger:dagger:2.27'
    annotationProcessor "com.google.dagger:dagger-compiler:2.23.2"

    implementation 'com.github.bumptech.glide:glide:3.8.0'

    //noinspection AndroidLintGradleCompatible
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    //noinspection GradleCompatible
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.4.0'

    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'
    compile 'com.mikhaellopez:circularimageview:3.0.2'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    implementation 'org.apache.commons:commons-collections4:4.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.0.3'
    implementation 'com.jakewharton:butterknife:10.2.1'
    implementation 'androidx.mediarouter:mediarouter:1.2.5'
    implementation 'androidx.appcompat:appcompat:1.3.1'

    implementation ('com.google.android.libraries.places:places:2.5.0'){
        exclude module: "glide"
    }

    implementation 'com.google.firebase:firebase-crashlytics:18.2.3'
    implementation 'com.google.firebase:firebase-analytics:19.0.2'


    //implementation ('com.google.android.libraries.places:places-compat:1.1.0') {
    //    exclude module: "glide"
    //}

    implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation("com.firebase:firebase-jobdispatcher-with-gcm-dep:0.6.0") {
        exclude module: "play-services-gcm"
    }
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-api-mockito:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4:1.6.1'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'io.github.luizgrp.sectionedrecyclerviewadapter:sectionedrecyclerviewadapter:1.1.3'

    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.5.0'

    // connecthings beacon notification
    //compile "com.connecthings.adtag:android-adtag-detection:3.1.10"
    //compile 'com.connecthings.adtag:android-adtag-beacon:3.0.3'

}

private Integer generateVersionCode() {
    return ext.versionCode;
}

public String generateVersionName() {
    return "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}";
}

// Define coverage source.
// If you have rs/aidl etc... add them here.
def coverageSourceDirs = [
        'src/main/java',
]

task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories.from = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from = fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: "test") {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['/di/**', '**/*_*', '**/*$*', '/ui/activities/**', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/dev/debug/com/accenture/dansmarue").exclude(fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
}

task printVersion() {
    def file = new File("version.txt")
    file.createNewFile()
    file.text = generateVersionName()
}
